security:
  # a new authentication system is available since Symfony 5.1 to make
  # Symfony security more extensible and easier to understand
  # https://symfony.com/doc/current/security/experimental_authenticators.html
  enable_authenticator_manager: true

  password_hashers:
    # Our user class and the algorithm we'll use to encode passwords
    # 'auto' means to let Symfony choose the best possible password hasher (Argon2 or Bcrypt)
    # https://symfony.com/doc/current/security.html#c-encoding-passwords
    App\Entity\User: 'auto'

  providers:
    # https://symfony.com/doc/current/security/user_provider.html
    # In this example, users are stored via Doctrine in the database
    # To see the users at src/App/DataFixtures/ORM/LoadFixtures.php
    # To load users from somewhere else: https://symfony.com/doc/current/security/user_provider.html#creating-a-custom-user-provider
    database_users:
      entity: { class: App\Entity\User, property: username }

  # https://symfony.com/doc/current/security.html#a-authentication-firewalls
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false

    login:
      pattern: ^/login
      stateless: true
      json_login:
        check_path: /login
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure

    api:
      pattern: ^/
      stateless: true
      jwt: ~

    main:
      # this firewall applies to all URLs
      pattern: ^/
      lazy: true

      # The user provider to use.
      provider: database_users

      logout:
        # The route name the user can go to in order to logout
        path: security_logout
        # The name of the route to redirect to after logging out
        target: homepage

      # needed because in tests we redefine the 'main' firewall to use
      # HTTP Basic instead of the login form, so this firewall has
      # multiple authenticators
      # See https://symfony.com/doc/current/security/experimental_authenticators.html#configuring-the-authentication-entry-point
#      entry_point: 'form_login'

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    # this is a catch-all for the admin area
    # additional security lives in the controllers
    - { path: '^/login/', roles: IS_AUTHENTICATED_ANONYMOUSLY}
    - { path: '/videos', roles: IS_AUTHENTICATED_FULLY}
    - { path: '/categorias', roles: IS_AUTHENTICATED_FULLY}

  role_hierarchy:
    ROLE_ADMIN: ROLE_USER

when@test:
  # this configuration simplifies testing URLs protected by the security mechanism
  # See https://symfony.com/doc/current/testing/http_authentication.html
  security:
    firewalls:
      main:
        http_basic: ~
